#textdomain wesnoth-Age_of_Tentacles

#define ABILITY_LEADERSHIP_LEVEL_7
    # Canned definition of the Leadership (level 7) ability to be included in an
    # [abilities] clause.
    [leadership]
        id=leadership
        value=175
        cumulative=no
        name={STR_LEADERSHIP_NAME}
        female_name={STR_LEADERSHIP_FEMALE_NAME}
        description={STR_LEADERSHIP_DESCRIPTION}
        affect_self=no
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=0
            [/filter]
        [/affect_adjacent]
    [/leadership]
    [leadership]
        id=leadership
        value=150
        cumulative=no
        affect_self=no
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=1
            [/filter]
        [/affect_adjacent]
    [/leadership]
    [leadership]
        id=leadership
        value=125
        cumulative=no
        affect_self=no
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=2
            [/filter]
        [/affect_adjacent]
    [/leadership]
    [leadership]
        id=leadership
        value=100
        cumulative=no
        affect_self=no
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=3
            [/filter]
        [/affect_adjacent]
    [/leadership]
    [leadership]
        id=leadership
        value=75
        cumulative=no
        affect_self=no
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=4
            [/filter]
        [/affect_adjacent]
    [/leadership]
    [leadership]
        id=leadership
        value=50
        cumulative=no
        affect_self=no
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
            [filter]
                level=5
            [/filter]
        [/affect_adjacent]
    [/leadership]
#enddef

#define ABILITY_CHAMELEON
    # Canned definition of the Chameleon ability to be included in an
    # [abilities] clause.
    [hides]
        id=chameleon
        name=_"chameleon"
        female_name=_"female^chameleon"
        description=_"Chameleon:
The unit can change its color like a chameleon.

Enemy units cannot see this unit when it's standing on place, except if they have units next to it. Any enemy unit that first discovers this unit immediately loses all its remaining movement."
        affect_self=yes
	alert=_"Chameleon!"
	[filter_self]
	    [filter_wml]
		moves=$this_unit.max_moves
	    [/filter_wml]
	[/filter_self]
    [/hides]
#enddef

#define ANIM_CHAMELEON
# definition of animations needed for chameleons
# to be added after [movement_anim] clause

[+movement_anim]
    alpha=0.9
[/movement_anim]

[pre_movement_anim]
    alpha=0.8~0.9
    [frame]
	duration=150
    [/frame]
[/pre_movement_anim]

[standing_anim]
    alpha=0.8~0.3:5000,0.3,0.3~0.8:5000
    [frame]
	duration=3600000
    [/frame]
[/standing_anim]

[post_movement_anim]
    alpha=0.9~0.8
    [frame]
	duration=200
    [/frame]
[/post_movement_anim]

#enddef

# Weapon specials

# Infection special macros #

#define INFECTION_RESULT
"Walking Corpse" #enddef

#define WEAPON_SPECIAL_INFECTION
    # Canned definition of the Infection ability to be included in a
    # [specials] clause. Must be used with {EVENTS_INFECTION}
    [plague]
	# infection also implies plague, though this tag doesn't seem to matter anymore
	id=infection
	name=_"infection"
	description= _ "Infection:
This attack infects living targets. Infected units lose 8 HP every turn until the plague destroy their mind and body, turning them into walking mindless bodies."
        type={INFECTION_RESULT}
    [/plague]
#enddef

#define EVENTS_INFECTION
    # Macro do add necessary events, it's meant to be used with {WEAPON_SPECIAL_INFECTION}
    # For units having infected weapon

    [event]
    # is used to show icon in status bar
         name=preload
         first_time_only=no
         id=show_infection
         [lua]
             code=<<
                 local _ = wesnoth.textdomain "wesnoth-Age_of_Tentacles"
                 local old_unit_status = wesnoth.theme_items.unit_status
                 function wesnoth.theme_items.unit_status()
                     local u = wesnoth.get_displayed_unit()
                     if not u then return {} end
                     local s = old_unit_status()
                     if u.status.infected then
                         table.insert(s, { "element", {
                             image = "misc/infected.png",
                             tooltip = _"infected: This unit is infected. It will lose 8 hp every turn and will be turned into zombie after death."
                         } })
                     end
                     return s
                 end
             >>
         [/lua]
    [/event]
    [event]
    # Helper event to fire preload event even if there was no save/loads
	name=attack
	first_time_only=yes
	id=fire_preload_event
	[fire_event]
	    name=preload
	[/fire_event]
    [/event]

    [event]
    # is used to fire infection event with proper arguments
	name=attacker_hits
	id=defender_infected
	first_time_only=no
	[filter_attack]
	    special=infection
	[/filter_attack]
	[fire_event]
	    name=infect_second_unit
	    [primary_unit]
		id=$unit.id
	    [/primary_unit]
	    [secondary_unit]
		id=$second_unit.id
	    [/secondary_unit]
	[/fire_event]
    [/event]
    [event]
    # is used to fire infection event with proper arguments
	name=defender_hits
	id=attacker_infected
	first_time_only=no
	[filter_second_attack]
	    special=infection
	[/filter_second_attack]
	[fire_event]
	    name=infect_second_unit
	    [primary_unit]
		id=$second_unit.id
	    [/primary_unit]
	    [secondary_unit]
		id=$unit.id
	    [/secondary_unit]
	[/fire_event]
    [/event]

    [event]
	name=infect_second_unit
	id=second_unit_infected
	first_time_only=no
	[filter_second]
	    [not]
		[filter_wml]
		    [status]
			not_living=yes
		    [/status]
		[/filter_wml]
		[or]
		    [filter_wml]
			[status]
			    infected=yes
			[/status]
		    [/filter_wml]
		[/or]
	    [/not]
	[/filter_second]
	[modify_unit]
	    [filter]
		id=$second_unit.id
	    [/filter]
	    [status]
		infected=yes
		unhealable=yes
	    [/status]
	    [variables]
		infected_by_side=$unit.side
	    [/variables]
	[/modify_unit]
	[if] # respect gender variations
	    [variable]
		name=second_unit.gender
		equals="female"
	    [/variable]
	    [then]
		[set_variable]
		    name=gender_infected
		    value= _ "female^infected"
		[/set_variable]
	    [/then]
	    [else]
		[set_variable]
		    name=gender_infected
		    value= _ "infected"
		[/set_variable]
	    [/else]
	[/if]
	[floating_text]
	    x,y=$x2,$y2
	    text="<span color='#ff0000'>$gender_infected|</span>"
	[/floating_text]
	{CLEAR_VARIABLE gender_infected}
	[object]
	    silent=yes
	    [filter]
		id=$second_unit.id
	    [/filter]
	    [effect]
		apply_to=image_mod
		add="CS(-50,-30,-50)"
	    [/effect]
	[/object]
	[sound]
	    name=poison.ogg
	[/sound]
    [/event]

    [event]
    # Infected units take damage on their side turn, after getting chance of being cured
	name=turn_refresh
	first_time_only=no
	[harm_unit]
	    kill=yes
	    fire_event=yes
	    animate=no
	    amount=8
	    [filter]
		[filter_wml]
		    [status]
			infected=yes
		    [/status]
		[/filter_wml]
		[and]
		    [filter_side]
			side=$side_number
		    [/filter_side]
		[/and]
	    [/filter]
	[/harm_unit]
	[sound]
	    name=poison.ogg
	[/sound]
    [/event]

    [event]
    # Infected units should be transformed on their last breath
	name=last_breath
	id=zombify_infected_units
	first_time_only=no
	[filter]
	    [filter_wml]
		[status]
		    infected=yes
		[/status]
	    [/filter_wml]
	[/filter]
	[scroll_to]
	    check_fogged=true
	    x,y=$x1,$y1
	[/scroll_to]
	[animate_unit]
	    flag=death
	    [filter]
		id=$unit.id
	    [/filter]
	[/animate_unit]
	[store_unit]
	    [filter]
		id=$unit.id
	    [/filter]
	    variable=infected_unit
	    kill=yes
	[/store_unit]
	[if] # units with undead_variation=null should not turn into zombies after death
	    [variable]
		name=unit.undead_variation
		not_equals="null"
	    [/variable]
	    [then]
		# have to be fixed, since it will generate sound even for fogged units
		[sound]
		    name=zombie-hit-4.ogg
		[/sound]
		[unit]
		    type={INFECTION_RESULT}
		    upkeep=loyal
		    animate=yes
		    side=$infected_unit.variables.infected_by_side
		    x,y=$infected_unit.x,$infected_unit.y
		    name=$infected_unit.name
		    variation=$infected_unit.undead_variation
		    facing=$infected_unit.facing
		[/unit]
	    [/then]
	[/if]
	{CLEAR_VARIABLE infected_unit}
    [/event]
#enddef

# End of Infection special macros #

